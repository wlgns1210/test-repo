name: Dev Deployment (Optimized)

on:
  pull_request:
    types: [closed]
    branches:
      - dev

permissions:
  contents: write
  pull-requests: write

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: product/dev
  DOCKERFILE_PATH: ./Dockerfile
  VALUES_FILE: values/dev.values.yaml

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: [self-hosted, dev]
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
        role-session-name: GitHubActions-Dev
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      id: ecr

    - name: Build & Push Docker image
      id: build
      run: |
        SHA=$(git rev-parse --short HEAD)
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --file $DOCKERFILE_PATH \
          --tag ${{ steps.ecr.outputs.registry }}/$ECR_REPOSITORY:$SHA \
          --tag ${{ steps.ecr.outputs.registry }}/$ECR_REPOSITORY:latest \
          --push \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          .

        echo "IMAGE_TAG=$SHA" >> $GITHUB_ENV

    - name: Update values.yaml
      run: |
        sed -i "s|image:.*|image: ${{ steps.ecr.outputs.registry }}/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}|g" $VALUES_FILE
        git add $VALUES_FILE
        git commit -m "chore: update dev image tag to ${{ env.IMAGE_TAG }} [skip ci]" || exit 0
        git push origin dev

    - name: Trigger ArgoCD Sync
      run: |
        argocd app sync ${{ secrets.ARGOCD_APP_NAME_DEV }} \
          --server ${{ secrets.ARGOCD_SERVER }} \
          --auth-token ${{ secrets.ARGOCD_TOKEN_DEV }} \
          --timeout 120

    - name: Comment on PR
      if: always()
      run: |
        STATUS=$([[ "${{ job.status }}" == "success" ]] && echo "✅" || echo "❌")
        gh pr comment ${{ github.event.number }} --body "$STATUS Dev deployment completed! Image: ${{ steps.ecr.outputs.registry }}/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}"
