name: Prod Auto Deployment

on:
  pull_request:
    types: [opened, labeled]
    branches:
      - prod

permissions:
  id-token: write
  contents: write
  pull-requests: write
  actions: read

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: product/prod
  DOCKERFILE_PATH: ./Dockerfile

jobs:
  auto-merge-and-deploy:
    runs-on: [self-hosted, prod]
    timeout-minutes: 5
    if: contains(github.event.pull_request.labels.*.name, 'approval')

    steps:
    - name: Checkout dev branch
      uses: actions/checkout@v4
      with:
        ref: dev
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Merge dev into prod (Fast-Forward)
      run: |
        git fetch origin prod
        git checkout prod
        git merge --ff-only dev
        git push origin prod

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN_PROD }}
        role-session-name: GitHubActions-Prod
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get commit SHA
      id: commit
      run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.commit.outputs.sha }}
      run: |
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --file $DOCKERFILE_PATH \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          --push \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          .

    - name: Trigger ArgoCD Sync
      env:
        ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
        ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN_PROD }}
        APP_NAME: ${{ secrets.ARGOCD_APP_NAME_PROD }}
      run: |
        curl -sSL -o /tmp/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x /tmp/argocd
        /tmp/argocd app sync $APP_NAME \
          --server $ARGOCD_SERVER \
          --auth-token $ARGOCD_TOKEN \
          --timeout 60
