name: Dev Auto Merge & Deploy

on:
  pull_request:
    branches: [dev]
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  id-token: write
  actions: read

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: product/dev
  DOCKERFILE_PATH: ./Dockerfile
  VALUES_FILE: values/dev.values.yaml
  ARGOCD_TIMEOUT: 180   # wait timeout Ïó∞Ïû•

jobs:
  auto-merge-and-deploy:
    runs-on: [self-hosted, dev]
    timeout-minutes: 10
    steps:
      # 1Ô∏è‚É£ PR Î∏åÎûúÏπò Checkout
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2Ô∏è‚É£ feature/* Î∏åÎûúÏπò Í≤ÄÏ¶ù
      - name: Verify feature branch
        run: |
          if [[ "${{ github.event.pull_request.head.ref }}" != feature/* ]]; then
            echo "Not a feature branch PR. Skipping job."
            exit 0
          fi

      # 3Ô∏è‚É£ Git config
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # 4Ô∏è‚É£ PR ÏûêÎèô Merge
      - name: Auto merge PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --merge --auto --delete-branch

      # 5Ô∏è‚É£ Merge ÌõÑ dev Î∏åÎûúÏπò Checkout
      - name: Checkout dev branch after merge
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 6Ô∏è‚É£ Docker Buildx ÏÑ§Ï†ï
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      # 7Ô∏è‚É£ AWS Credentials ÏÑ§Ï†ï
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
          role-session-name: GitHubActions-Dev
          aws-region: ${{ env.AWS_REGION }}

      # 8Ô∏è‚É£ ECR Login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 9Ô∏è‚É£ Commit SHA Í∞ÄÏ†∏Ïò§Í∏∞
      - name: Get commit SHA
        id: commit
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # üîü Docker Build & Push (if ARM flag ÌïÑÏöî Ïãú Î∂ÑÍ∏∞)
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.commit.outputs.sha }}
        run: |
          # Í∏∞Î≥∏ÏùÄ amd64
          PLATFORMS="linux/amd64"
          if [[ "${{ github.event.pull_request.head.ref }}" == *-arm ]]; then
            PLATFORMS="linux/amd64,linux/arm64"
          fi

          docker buildx build \
            --platform $PLATFORMS \
            --file $DOCKERFILE_PATH \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            .

      # 11Ô∏è‚É£ dev values.yaml Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ ÏóÖÎç∞Ïù¥Ìä∏
      - name: Update values file
        env:
          IMAGE_TAG: ${{ steps.commit.outputs.sha }}
        run: |
          # image.tagÎßå Î≥ÄÍ≤Ω
          sed -i "s|^\(\s*tag:\s*\).*|\1$IMAGE_TAG|" $VALUES_FILE
          git add $VALUES_FILE
          git commit -m "chore: update dev image tag to $IMAGE_TAG [skip ci]" || exit 0
          git push origin dev

      # 12Ô∏è‚É£ ArgoCD ÏàòÎèô Sync
      - name: Trigger ArgoCD Sync
        run: |
          /tmp/argocd app sync $APP_NAME \
            --server $ARGOCD_SERVER \
            --auth-token $ARGOCD_TOKEN \
            --insecure \
            --force
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN_DEV }}
          APP_NAME: ${{ secrets.ARGOCD_APP_NAME_DEV }}

      - name: Wait for deployment
        run: |
          /tmp/argocd app wait $APP_NAME \
            --server $ARGOCD_SERVER \
            --auth-token $ARGOCD_TOKEN \
            --insecure \
            --timeout 180 || echo "Deployment wait timed out but continuing"
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN_DEV }}
          APP_NAME: ${{ secrets.ARGOCD_APP_NAME_DEV }}


      # 14Ô∏è‚É£ PR Comment
      - name: Comment on PR
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            gh pr comment ${{ github.event.number }} --body "‚úÖ Dev deployment successful! Image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.commit.outputs.sha }} Deployed to dev cluster via ArgoCD."
          else
            gh pr comment ${{ github.event.number }} --body "‚ùå Dev deployment failed. Please check the workflow logs."
          fi
