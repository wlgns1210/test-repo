name: Build & Push

on:
  push:
    branches: [ "dev" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: [self-hosted, linux, dev]
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password \
            | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build & Push (${{ matrix.arch }})
        # 기본은 amd64만, ARM 빌드는 특정 브랜치일 때만 실행
        if: ${{ matrix.arch == 'amd64' || github.ref == 'refs/heads/arm-build' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/${{ matrix.arch }}
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/product/dev:${{ github.sha }}-${{ matrix.arch }}

  manifest:
    needs: build
    runs-on: [self-hosted, linux, dev]
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password \
            | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Create & Push manifest
        run: |
          IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/product/dev
          SHA=${{ github.sha }}

          # amd64는 항상 추가
          docker manifest create $IMAGE:$SHA \
            --amend $IMAGE:$SHA-amd64

          # arm-build 브랜치일 때만 arm64도 추가
          if [ "${GITHUB_REF##*/}" = "arm-build" ]; then
            docker manifest create $IMAGE:$SHA \
              --amend $IMAGE:$SHA-amd64 \
              --amend $IMAGE:$SHA-arm64
          fi

          docker manifest push $IMAGE:$SHA
